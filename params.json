{"name":"Matthew O'Shaughnessy","tagline":"Electrical Engineering, Georgia Institute of Technology","body":"# Welcome!\r\n\r\n## Personal Projects\r\n\r\n### In progress: Intelligent Quadrocopter\r\nWith the salary from my co-op this semester I'll finally be able to build a quadrocopter. When I finish the basic quadrocoptor, I hope to experiment with image processing and computer vision via an on-board CMOS camera.\r\n\r\n### Motion-Controlled RC Helicopter\r\nMy roommate and I got [these $20 RC Helicopter](http://www.amazon.com/Syma-S107-S107G-Helicopter-Red/dp/B004A8ZRBA/ref=sr_1_5?ie=UTF8&qid=1399236923&sr=8-5), which are a lot of fun to fly, but the RC controllers they shipped with are hard to use. Using an Arduino-based logic analyzer, an IR receiver, and blog posts from people reverse-engineering the control signals of similar helicopters, I determined the control signals for my helicopter and created a new controller with an accelerometer and gyroscope that uses tilt controls to fly the helicopter.\r\n* Source and project details: [link]()\r\n* Languages: Arduino, C, AVR Assembly, MATLAB/Simulink (testing/debugging)\r\n\r\n### Georgia Tech Registration Alerts\r\nWhen my registration slot for Fall of my second year opened, every ECE class I had the prerequisites for was full. To prevent the same from happening the next semester (and, of course, avoid early morning sections), I made a command-line utility to monitor registration numbers and send me text alerts when sections opened up. My program features a custom logging utility and network analytics that export to MATLAB for visualization.\r\n* Source: [link](/gtregalert#gtregalert)\r\n* Languages: Java, MATLAB (network latency visualization), [jsoup](jsoup.org) and [google-voice-java](https://code.google.com/p/google-voice-java/) libraries\r\n\r\n***\r\n\r\n## Extracurricular Projects\r\n\r\n### CS 1371 Practice Test Question Bank\r\nPractice is the best way to learn to code, so we try to make as many practice exam questions available to students as possible. Previous versions of the practice question bank were difficult both for students to use and TAs to update and add questions to. The new question bank I created with a small group of other TAs allows students to interactively answer multiple choice and code tracing questions, and allows TAs to easily add and update questions with a built-in error flagging system. A MATLAB script automatically parses data from formatted exam questions and creates an HTML POST request to add them to the website.\r\n* Available: [link](http://matlabcs1371.appspot.com/)\r\n* Languages: HMTL, CSS, JavaScript/jQuery, Python, [Jinja2 Templating Engine](http://jinja.pocoo.org/), Google App Engine, MATLAB\r\n\r\n### Neural Networks for Accessibility Device Data Classification\r\nWith my undergraduate research group, I implemented neural networks in MATLAB and Python (using NumPy and SciPy) for classification of data from a multi-modal accessibility device. Individually, I implemented performance-intensive portions of the training algorithm in CUDA C++. Unfortunately, the data transfer time between the CPU and GPU resulted in execution times longer than purely-CPU execution times when tested with handwritten digit classification, but GPU implementation will be faster for data sets with larger data sample sizes.\r\n\r\n### MapReduce/Apache Hadoop Simulator\r\nWith my undergraduate research group, I wrote a simulator for Apache Hadoop to allow estimation of MapReduce job times before execution. I was largely responsible for the design and implementation of the distributed storage component of the simulator, which allowed users to estimate execution times of different network topologies.\r\n\r\n***\r\n\r\n## Class Projects\r\n\r\n### RADAR Project\r\n(ECE 4271 - Applications of DSP) Processed received RADAR data to determine the range, velocity, and radar cross-section (RCS) of multiple targets from a synthesized fast-time/slow-time matrix of a fighter jet.\r\n\r\n### Speech Enhancement Project\r\n(ECE 4271 - Applications of DSP) Used short-term Fourier analysis of microphone array data to determine the location of a speaker in a noisy room. After the location of the speaker was determined, MVDR Beamforming was used to enhance the speech signal. Linear prediction was used to verify formants of the original signal matched formants of the enhanced signal.\r\n\r\n### Echocardiogram Tracking Project\r\n(ECE 4271 - Applications of DSP) The two-dimensional cross-correlation was used to track the movement of a patient's interventricular septum from B-mode ECG images.\r\n\r\n### Seismic Oil Detection Project\r\n(ECE 4271 - Applications of DSP) Spiking and predictive deconvolution were used to spike a wavelet to determine the impulse response of the earth. Prediction filters were used to remove echoing, and the depth of water, limestone, and oil layers in the earth were determined from the earth impulse response.\r\n\r\n### Pipelined MIPS Processor\r\n(ECE 3056 - Computer Architecture) Modified existing VHDL code for a single-stage MIPS processor to create a five-stage pipelined processor. Significant debugging and testing with ModelSim.\r\n\r\n### Analog Electronics Lab\r\n(ECE 3043 - Measurements, Circuits, and Microelectronics Laboratory) Created and tested passive and active low-, high-, band-pass, and notch filters, linear and relaxation oscillators, and BJT and MOSFET circuits. Simulated using NI Multisim and SPICE.\r\n\r\n### Embedded Battleship Game\r\n(ECE 2035 - Hardware/Software Programming) Created an embedded battleship player in C++ and ARM assembly on the mbed microcontroller that played the most statistically optimal game of battleship against an opponent provided to us.\r\n\r\n### Efficient Tile Puzzle Solver\r\n(ECE 2035 - Hardware/Software Programming) Created a solver for a rotating tile puzzle in C and rewrote for efficiency in MIPS assembly. Graded on assembly performance by number of instructions stored and executed and storage/stack space used.\r\n\r\n### Robot Self-Test on FPGA\r\n(ECE 2031 - Digital Design Lab) Created a self-test program on a created single-stage processor for an FPGA-based robot. Used simple assembly language created for single-stage processor to verify battery level and operation of robot inputs and outputs, sonar, and motors.\r\n\r\n### Java Implementation of Basic Data Structures\r\n(CS 1332 - Data Structures & Algorithms) Implemented stacks, queues, priority queues, singly and doubly linked lists, binary, balanced, and self-balancing trees, hashmaps, basic sorting algorithms, and graph search algorithms in Java.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}